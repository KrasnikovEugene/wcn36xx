This file describes how to build wcn36xx with backports
It assumes you have a prepared cyanogenmod built somewhere already

1) Open up a terminal
2) Change to a directory where you'll keep your git repositories like ~/git/
3) Checkout backports
    # git clone git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/backports.git

4 Checkout linux-next
    # git clone --no-checkout git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
    The --no-checkout is there to save space since backports will pickout the relevant stuff anyway.

5) Checkout wcn36xx from upstream or your own branch
    # git clone git@github.com:KrasnikovEugene/wcn36xx.git

6) Prepare backports 
    # cd backports
    # cp ../wcn36xx/backports/0001-wcn36xx-backports-config.patch .
    # git am 0001-wcn36xx-backports-config.patch

7) Generate a build tree
    Stay in the backports folder and do a git log
    Find the first commit that says something like:
    "This puts us in sync with next-20130618"
    Then execute the command:
    # ./gentree.py --verbose --clean --git-revision next-20130618 --copy-list copy-list.mac80211 --extra-driver ../ copy-list.wcn36xx ../linux-next/ ../backport-wcn

    This command will create the folder ../backport-wcn where it will put all the necessary linux stuff from linux-next.
    It will also apply a number of patches, if any of these fail you must sort it out otherwise the build folder will 
    not be ready.

8) # cd ../backport-wcn

9) Time to build!

   # export CM_BUILD=mako
   # export CM_ROOT=~/mako/cm-10.1
   This sets up some links to your cm build

   # make KLIB=$CM_ROOT/out/target/product/$CM_BUILD/obj/KERNEL_OBJ \
        KLIB_BUILD=$CM_ROOT/out/target/product/$CM_BUILD/obj/KERNEL_OBJ \
        ARCH=arm \
        CROSS_COMPILE=$CM_ROOT/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi- \
        defconfig-wcn36xx

    This executes the defconfig for the environment
    

    # make KLIB=$CM_ROOT/out/target/product/$CM_BUILD/obj/KERNEL_OBJ \
        KLIB_BUILD=$CM_ROOT/out/target/product/$CM_BUILD/obj/KERNEL_OBJ \
        ARCH=arm \
        CROSS_COMPILE=$CM_ROOT/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi-

    Builds the module and all necessary compat/cfg80211/mac80211 modules as well.

10) Symlink wcn36xx driver to your own repository

    The gentree.py command will copy the driver from the place you pointed out.
    In this case '../'. However, if you want to work on it I recommend replacing the
    folder with a symlink to where you have your repo for wcn36xx.
    # rm -rf drivers/net/wireless/ath/wcn36xx
    # ln -s ~/git/wcn36xx drivers/net/wireless/ath/wcn36xx

NOTES FOR OSX:
To make this run on OSX (Mountain Lion) I had to do some changes.
1) The make commands shall not use the same path for the CROSS_COMPILE option. "linux-x86" must be replaced with "darwin-x86".

2) The Makefile in backport-wcn must be modified. 
    The comment on line 101 looking like this:
		# RHEL as well, sadly we need to grep for it				;\
    It must be remove or else you will get a bash error.

3) You must modify the kconf/Makefile 
   To the first line in this file (beginning with CFLAGS) add -DKBUILD_NO_NLS to the end.
   Otherwise you will get a lkc.h error when building.
 
